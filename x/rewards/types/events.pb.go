// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bze/rewards/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakingRewardCreateEvent struct {
	RewardId     string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	PrizeAmount  string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom   string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	StakingDenom string `protobuf:"bytes,4,opt,name=staking_denom,json=stakingDenom,proto3" json:"staking_denom,omitempty"`
	Duration     uint32 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	MinStake     uint64 `protobuf:"varint,6,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	Lock         uint32 `protobuf:"varint,7,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *StakingRewardCreateEvent) Reset()         { *m = StakingRewardCreateEvent{} }
func (m *StakingRewardCreateEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardCreateEvent) ProtoMessage()    {}
func (*StakingRewardCreateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{0}
}
func (m *StakingRewardCreateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardCreateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardCreateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardCreateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardCreateEvent.Merge(m, src)
}
func (m *StakingRewardCreateEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardCreateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardCreateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardCreateEvent proto.InternalMessageInfo

func (m *StakingRewardCreateEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardCreateEvent) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *StakingRewardCreateEvent) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *StakingRewardCreateEvent) GetStakingDenom() string {
	if m != nil {
		return m.StakingDenom
	}
	return ""
}

func (m *StakingRewardCreateEvent) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *StakingRewardCreateEvent) GetMinStake() uint64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *StakingRewardCreateEvent) GetLock() uint32 {
	if m != nil {
		return m.Lock
	}
	return 0
}

type StakingRewardUpdateEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Duration uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *StakingRewardUpdateEvent) Reset()         { *m = StakingRewardUpdateEvent{} }
func (m *StakingRewardUpdateEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardUpdateEvent) ProtoMessage()    {}
func (*StakingRewardUpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{1}
}
func (m *StakingRewardUpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardUpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardUpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardUpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardUpdateEvent.Merge(m, src)
}
func (m *StakingRewardUpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardUpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardUpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardUpdateEvent proto.InternalMessageInfo

func (m *StakingRewardUpdateEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardUpdateEvent) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type StakingRewardClaimEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *StakingRewardClaimEvent) Reset()         { *m = StakingRewardClaimEvent{} }
func (m *StakingRewardClaimEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardClaimEvent) ProtoMessage()    {}
func (*StakingRewardClaimEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{2}
}
func (m *StakingRewardClaimEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardClaimEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardClaimEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardClaimEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardClaimEvent.Merge(m, src)
}
func (m *StakingRewardClaimEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardClaimEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardClaimEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardClaimEvent proto.InternalMessageInfo

func (m *StakingRewardClaimEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardClaimEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StakingRewardClaimEvent) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type StakingRewardJoinEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *StakingRewardJoinEvent) Reset()         { *m = StakingRewardJoinEvent{} }
func (m *StakingRewardJoinEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardJoinEvent) ProtoMessage()    {}
func (*StakingRewardJoinEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{3}
}
func (m *StakingRewardJoinEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardJoinEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardJoinEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardJoinEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardJoinEvent.Merge(m, src)
}
func (m *StakingRewardJoinEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardJoinEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardJoinEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardJoinEvent proto.InternalMessageInfo

func (m *StakingRewardJoinEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardJoinEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StakingRewardJoinEvent) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type StakingRewardExitEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *StakingRewardExitEvent) Reset()         { *m = StakingRewardExitEvent{} }
func (m *StakingRewardExitEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardExitEvent) ProtoMessage()    {}
func (*StakingRewardExitEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{4}
}
func (m *StakingRewardExitEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardExitEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardExitEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardExitEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardExitEvent.Merge(m, src)
}
func (m *StakingRewardExitEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardExitEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardExitEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardExitEvent proto.InternalMessageInfo

func (m *StakingRewardExitEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardExitEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type StakingRewardFinishEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *StakingRewardFinishEvent) Reset()         { *m = StakingRewardFinishEvent{} }
func (m *StakingRewardFinishEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardFinishEvent) ProtoMessage()    {}
func (*StakingRewardFinishEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{5}
}
func (m *StakingRewardFinishEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardFinishEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardFinishEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardFinishEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardFinishEvent.Merge(m, src)
}
func (m *StakingRewardFinishEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardFinishEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardFinishEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardFinishEvent proto.InternalMessageInfo

func (m *StakingRewardFinishEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type StakingRewardDistributionEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *StakingRewardDistributionEvent) Reset()         { *m = StakingRewardDistributionEvent{} }
func (m *StakingRewardDistributionEvent) String() string { return proto.CompactTextString(m) }
func (*StakingRewardDistributionEvent) ProtoMessage()    {}
func (*StakingRewardDistributionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{6}
}
func (m *StakingRewardDistributionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingRewardDistributionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingRewardDistributionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingRewardDistributionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingRewardDistributionEvent.Merge(m, src)
}
func (m *StakingRewardDistributionEvent) XXX_Size() int {
	return m.Size()
}
func (m *StakingRewardDistributionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingRewardDistributionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StakingRewardDistributionEvent proto.InternalMessageInfo

func (m *StakingRewardDistributionEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingRewardDistributionEvent) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type TradingRewardCreateEvent struct {
	RewardId    string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	PrizeAmount string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom  string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	Duration    uint32 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	MarketId    string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Slots       uint32 `protobuf:"varint,6,opt,name=slots,proto3" json:"slots,omitempty"`
	Creator     string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *TradingRewardCreateEvent) Reset()         { *m = TradingRewardCreateEvent{} }
func (m *TradingRewardCreateEvent) String() string { return proto.CompactTextString(m) }
func (*TradingRewardCreateEvent) ProtoMessage()    {}
func (*TradingRewardCreateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{7}
}
func (m *TradingRewardCreateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardCreateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardCreateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardCreateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardCreateEvent.Merge(m, src)
}
func (m *TradingRewardCreateEvent) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardCreateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardCreateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardCreateEvent proto.InternalMessageInfo

func (m *TradingRewardCreateEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingRewardCreateEvent) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *TradingRewardCreateEvent) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *TradingRewardCreateEvent) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TradingRewardCreateEvent) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *TradingRewardCreateEvent) GetSlots() uint32 {
	if m != nil {
		return m.Slots
	}
	return 0
}

func (m *TradingRewardCreateEvent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type TradingRewardExpireEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *TradingRewardExpireEvent) Reset()         { *m = TradingRewardExpireEvent{} }
func (m *TradingRewardExpireEvent) String() string { return proto.CompactTextString(m) }
func (*TradingRewardExpireEvent) ProtoMessage()    {}
func (*TradingRewardExpireEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{8}
}
func (m *TradingRewardExpireEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardExpireEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardExpireEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardExpireEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardExpireEvent.Merge(m, src)
}
func (m *TradingRewardExpireEvent) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardExpireEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardExpireEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardExpireEvent proto.InternalMessageInfo

func (m *TradingRewardExpireEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type TradingRewardActivationEvent struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *TradingRewardActivationEvent) Reset()         { *m = TradingRewardActivationEvent{} }
func (m *TradingRewardActivationEvent) String() string { return proto.CompactTextString(m) }
func (*TradingRewardActivationEvent) ProtoMessage()    {}
func (*TradingRewardActivationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{9}
}
func (m *TradingRewardActivationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardActivationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardActivationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardActivationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardActivationEvent.Merge(m, src)
}
func (m *TradingRewardActivationEvent) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardActivationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardActivationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardActivationEvent proto.InternalMessageInfo

func (m *TradingRewardActivationEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type TradingRewardDistributionEvent struct {
	RewardId    string   `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	PrizeAmount string   `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom  string   `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	Winners     []string `protobuf:"bytes,4,rep,name=winners,proto3" json:"winners,omitempty"`
}

func (m *TradingRewardDistributionEvent) Reset()         { *m = TradingRewardDistributionEvent{} }
func (m *TradingRewardDistributionEvent) String() string { return proto.CompactTextString(m) }
func (*TradingRewardDistributionEvent) ProtoMessage()    {}
func (*TradingRewardDistributionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_138f1d8da8cdcebe, []int{10}
}
func (m *TradingRewardDistributionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingRewardDistributionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingRewardDistributionEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingRewardDistributionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingRewardDistributionEvent.Merge(m, src)
}
func (m *TradingRewardDistributionEvent) XXX_Size() int {
	return m.Size()
}
func (m *TradingRewardDistributionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingRewardDistributionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TradingRewardDistributionEvent proto.InternalMessageInfo

func (m *TradingRewardDistributionEvent) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *TradingRewardDistributionEvent) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *TradingRewardDistributionEvent) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *TradingRewardDistributionEvent) GetWinners() []string {
	if m != nil {
		return m.Winners
	}
	return nil
}

func init() {
	proto.RegisterType((*StakingRewardCreateEvent)(nil), "bze.rewards.v1.StakingRewardCreateEvent")
	proto.RegisterType((*StakingRewardUpdateEvent)(nil), "bze.rewards.v1.StakingRewardUpdateEvent")
	proto.RegisterType((*StakingRewardClaimEvent)(nil), "bze.rewards.v1.StakingRewardClaimEvent")
	proto.RegisterType((*StakingRewardJoinEvent)(nil), "bze.rewards.v1.StakingRewardJoinEvent")
	proto.RegisterType((*StakingRewardExitEvent)(nil), "bze.rewards.v1.StakingRewardExitEvent")
	proto.RegisterType((*StakingRewardFinishEvent)(nil), "bze.rewards.v1.StakingRewardFinishEvent")
	proto.RegisterType((*StakingRewardDistributionEvent)(nil), "bze.rewards.v1.StakingRewardDistributionEvent")
	proto.RegisterType((*TradingRewardCreateEvent)(nil), "bze.rewards.v1.TradingRewardCreateEvent")
	proto.RegisterType((*TradingRewardExpireEvent)(nil), "bze.rewards.v1.TradingRewardExpireEvent")
	proto.RegisterType((*TradingRewardActivationEvent)(nil), "bze.rewards.v1.TradingRewardActivationEvent")
	proto.RegisterType((*TradingRewardDistributionEvent)(nil), "bze.rewards.v1.TradingRewardDistributionEvent")
}

func init() { proto.RegisterFile("bze/rewards/v1/events.proto", fileDescriptor_138f1d8da8cdcebe) }

var fileDescriptor_138f1d8da8cdcebe = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xbf, 0x6f, 0x13, 0x31,
	0x18, 0x8d, 0xd3, 0xcb, 0x2f, 0xd3, 0x30, 0x9c, 0xaa, 0x62, 0xb5, 0xe8, 0x08, 0xc7, 0x92, 0x01,
	0x72, 0xaa, 0x18, 0x18, 0x98, 0x0a, 0x4d, 0xa5, 0xb2, 0x20, 0x5d, 0xe9, 0xc2, 0x12, 0xf9, 0x62,
	0xeb, 0x62, 0x25, 0x67, 0x9f, 0x6c, 0x27, 0x0d, 0xf9, 0x2b, 0xd8, 0xf9, 0x87, 0x18, 0x3b, 0x32,
	0xa2, 0x84, 0x95, 0xff, 0x01, 0xd9, 0xbe, 0x96, 0x5e, 0x84, 0xc4, 0x21, 0x40, 0xdd, 0xee, 0x7d,
	0x7e, 0xfe, 0xde, 0xf7, 0xde, 0x7d, 0x32, 0x3c, 0x4c, 0x56, 0x34, 0x92, 0xf4, 0x12, 0x4b, 0xa2,
	0xa2, 0xc5, 0x51, 0x44, 0x17, 0x94, 0x6b, 0x35, 0xc8, 0xa5, 0xd0, 0xc2, 0xbf, 0x9f, 0xac, 0xe8,
	0xa0, 0x38, 0x1c, 0x2c, 0x8e, 0x0e, 0xf6, 0x52, 0x91, 0x0a, 0x7b, 0x14, 0x99, 0x2f, 0xc7, 0x0a,
	0xbf, 0x03, 0x88, 0xce, 0x35, 0x9e, 0x32, 0x9e, 0xc6, 0x96, 0xfb, 0x5a, 0x52, 0xac, 0xe9, 0xd0,
	0x74, 0xf2, 0x0f, 0x61, 0xc7, 0x35, 0x18, 0x31, 0x82, 0x40, 0x0f, 0xf4, 0x3b, 0x71, 0xdb, 0x15,
	0xce, 0x88, 0xff, 0x18, 0xee, 0xe6, 0x92, 0xad, 0xe8, 0x08, 0x67, 0x62, 0xce, 0x35, 0xaa, 0xdb,
	0xf3, 0x7b, 0xb6, 0x76, 0x6c, 0x4b, 0xfe, 0x23, 0xe8, 0xe0, 0x88, 0x50, 0x2e, 0x32, 0xb4, 0x63,
	0x19, 0xd0, 0x96, 0x4e, 0x4c, 0xc5, 0x7f, 0x02, 0xbb, 0xca, 0x89, 0x17, 0x14, 0xcf, 0x52, 0x76,
	0x8b, 0xa2, 0x23, 0x1d, 0xc0, 0x36, 0x99, 0x4b, 0xac, 0x99, 0xe0, 0xa8, 0xd1, 0x03, 0xfd, 0x6e,
	0x7c, 0x83, 0xcd, 0x84, 0x19, 0xe3, 0x23, 0xc3, 0xa7, 0xa8, 0xd9, 0x03, 0x7d, 0x2f, 0x6e, 0x67,
	0x8c, 0x1b, 0x47, 0xd4, 0xf7, 0xa1, 0x37, 0x13, 0xe3, 0x29, 0x6a, 0xd9, 0x4b, 0xf6, 0x3b, 0x3c,
	0xdf, 0xb2, 0x7b, 0x91, 0x93, 0x6a, 0x76, 0x6f, 0x4f, 0x51, 0x2f, 0x4f, 0x11, 0x4e, 0xe0, 0x83,
	0x72, 0x86, 0x33, 0xcc, 0xb2, 0x0a, 0x3d, 0x11, 0x6c, 0x61, 0x42, 0x24, 0x55, 0xaa, 0x48, 0xef,
	0x1a, 0xfa, 0xfb, 0xb0, 0x59, 0xc4, 0xea, 0x42, 0x2b, 0x50, 0x98, 0xc2, 0xfd, 0x92, 0xd2, 0x1b,
	0xc1, 0xf8, 0x7f, 0x11, 0x7a, 0xbb, 0x25, 0x34, 0x5c, 0x32, 0xfd, 0x37, 0x42, 0xe1, 0x8b, 0xad,
	0xe0, 0x4f, 0x19, 0x67, 0x6a, 0xf2, 0xfb, 0x96, 0xe1, 0x05, 0x0c, 0x4a, 0x17, 0x4f, 0x98, 0xd2,
	0x92, 0x25, 0x73, 0x93, 0x7c, 0x85, 0x89, 0x7e, 0x1a, 0xac, 0x97, 0x0c, 0x7e, 0x03, 0x10, 0xbd,
	0x93, 0x98, 0xdc, 0xcd, 0xe2, 0xdf, 0xde, 0x26, 0xef, 0x17, 0x3b, 0x8d, 0xe5, 0x94, 0x6a, 0x23,
	0xde, 0x70, 0xe2, 0xae, 0x70, 0x46, 0xfc, 0x3d, 0xd8, 0x50, 0x33, 0xa1, 0x95, 0x5d, 0xf6, 0x6e,
	0xec, 0x80, 0x89, 0x7d, 0x6c, 0xc6, 0x17, 0xd2, 0x2e, 0x7b, 0x27, 0xbe, 0x86, 0x26, 0xf6, 0x92,
	0xcb, 0xe1, 0x32, 0x67, 0xb2, 0x82, 0xcb, 0xf0, 0x25, 0x7c, 0x58, 0xba, 0x78, 0x3c, 0xd6, 0x6c,
	0x81, 0xab, 0x85, 0x1e, 0x7e, 0x02, 0x30, 0x28, 0xdd, 0xfe, 0xc3, 0x9f, 0xf6, 0x2f, 0x22, 0x46,
	0xb0, 0x75, 0xc9, 0x38, 0xa7, 0x52, 0x21, 0xaf, 0xb7, 0x63, 0x32, 0x29, 0xe0, 0xab, 0xd3, 0xcf,
	0xeb, 0x00, 0x5c, 0xad, 0x03, 0xf0, 0x75, 0x1d, 0x80, 0x8f, 0x9b, 0xa0, 0x76, 0xb5, 0x09, 0x6a,
	0x5f, 0x36, 0x41, 0xed, 0xfd, 0xd3, 0x94, 0xe9, 0xc9, 0x3c, 0x19, 0x8c, 0x45, 0x16, 0x25, 0x2b,
	0xfa, 0x0c, 0xcf, 0xf2, 0x09, 0xd6, 0x14, 0x5b, 0x14, 0x2d, 0x6f, 0xde, 0x5a, 0xfd, 0x21, 0xa7,
	0x2a, 0x69, 0xda, 0x27, 0xf4, 0xf9, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0x9b, 0xf1, 0x6f,
	0x87, 0x05, 0x00, 0x00,
}

func (m *StakingRewardCreateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardCreateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardCreateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Lock))
		i--
		dAtA[i] = 0x38
	}
	if m.MinStake != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StakingDenom) > 0 {
		i -= len(m.StakingDenom)
		copy(dAtA[i:], m.StakingDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StakingDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardUpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardUpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardClaimEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardClaimEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardClaimEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardJoinEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardJoinEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardJoinEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardExitEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardExitEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardExitEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardFinishEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardFinishEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardFinishEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakingRewardDistributionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingRewardDistributionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingRewardDistributionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardCreateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardCreateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardCreateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Slots != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Slots))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardExpireEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardExpireEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardExpireEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardActivationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardActivationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardActivationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingRewardDistributionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingRewardDistributionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingRewardDistributionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winners) > 0 {
		for iNdEx := len(m.Winners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Winners[iNdEx])
			copy(dAtA[i:], m.Winners[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Winners[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakingRewardCreateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StakingDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovEvents(uint64(m.Duration))
	}
	if m.MinStake != 0 {
		n += 1 + sovEvents(uint64(m.MinStake))
	}
	if m.Lock != 0 {
		n += 1 + sovEvents(uint64(m.Lock))
	}
	return n
}

func (m *StakingRewardUpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovEvents(uint64(m.Duration))
	}
	return n
}

func (m *StakingRewardClaimEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *StakingRewardJoinEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *StakingRewardExitEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *StakingRewardFinishEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *StakingRewardDistributionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TradingRewardCreateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovEvents(uint64(m.Duration))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Slots != 0 {
		n += 1 + sovEvents(uint64(m.Slots))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TradingRewardExpireEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TradingRewardActivationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *TradingRewardDistributionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Winners) > 0 {
		for _, s := range m.Winners {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakingRewardCreateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardCreateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardCreateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			m.Lock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardUpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardUpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardUpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardClaimEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardClaimEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardClaimEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardJoinEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardJoinEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardJoinEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardExitEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardExitEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardExitEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardFinishEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardFinishEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardFinishEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingRewardDistributionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingRewardDistributionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingRewardDistributionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardCreateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardCreateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardCreateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			m.Slots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slots |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardExpireEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardExpireEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardExpireEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardActivationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardActivationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardActivationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingRewardDistributionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingRewardDistributionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingRewardDistributionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winners = append(m.Winners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
