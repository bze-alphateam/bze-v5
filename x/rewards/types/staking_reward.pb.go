// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bze/rewards/v1/staking_reward.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakingReward struct {
	RewardId         string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	PrizeAmount      string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom       string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	StakingDenom     string `protobuf:"bytes,4,opt,name=staking_denom,json=stakingDenom,proto3" json:"staking_denom,omitempty"`
	Duration         uint32 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Payouts          uint32 `protobuf:"varint,6,opt,name=payouts,proto3" json:"payouts,omitempty"`
	MinStake         uint64 `protobuf:"varint,7,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	Lock             uint32 `protobuf:"varint,8,opt,name=lock,proto3" json:"lock,omitempty"`
	StakedAmount     string `protobuf:"bytes,9,opt,name=staked_amount,json=stakedAmount,proto3" json:"staked_amount,omitempty"`
	DistributedStake string `protobuf:"bytes,10,opt,name=distributed_stake,json=distributedStake,proto3" json:"distributed_stake,omitempty"`
}

func (m *StakingReward) Reset()         { *m = StakingReward{} }
func (m *StakingReward) String() string { return proto.CompactTextString(m) }
func (*StakingReward) ProtoMessage()    {}
func (*StakingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad3d7f53761618d, []int{0}
}
func (m *StakingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingReward.Merge(m, src)
}
func (m *StakingReward) XXX_Size() int {
	return m.Size()
}
func (m *StakingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingReward.DiscardUnknown(m)
}

var xxx_messageInfo_StakingReward proto.InternalMessageInfo

func (m *StakingReward) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *StakingReward) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *StakingReward) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *StakingReward) GetStakingDenom() string {
	if m != nil {
		return m.StakingDenom
	}
	return ""
}

func (m *StakingReward) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *StakingReward) GetPayouts() uint32 {
	if m != nil {
		return m.Payouts
	}
	return 0
}

func (m *StakingReward) GetMinStake() uint64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *StakingReward) GetLock() uint32 {
	if m != nil {
		return m.Lock
	}
	return 0
}

func (m *StakingReward) GetStakedAmount() string {
	if m != nil {
		return m.StakedAmount
	}
	return ""
}

func (m *StakingReward) GetDistributedStake() string {
	if m != nil {
		return m.DistributedStake
	}
	return ""
}

func init() {
	proto.RegisterType((*StakingReward)(nil), "bze.rewards.v1.StakingReward")
}

func init() {
	proto.RegisterFile("bze/rewards/v1/staking_reward.proto", fileDescriptor_aad3d7f53761618d)
}

var fileDescriptor_aad3d7f53761618d = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x19, 0x2e, 0x17, 0xca, 0x5c, 0xb8, 0xd1, 0x59, 0x4d, 0x34, 0xa9, 0x28, 0x1b, 0x12,
	0xb5, 0x0d, 0xf1, 0x09, 0x34, 0xc6, 0xc4, 0x6d, 0xdd, 0xb9, 0x69, 0xa6, 0xcc, 0x09, 0x4c, 0xa0,
	0x9d, 0xa6, 0x9d, 0xa2, 0xf4, 0x29, 0x7c, 0x2c, 0x57, 0x86, 0xa5, 0x4b, 0x03, 0x2f, 0x62, 0x7a,
	0xa6, 0x45, 0x77, 0xfd, 0xbf, 0xff, 0xef, 0x99, 0xff, 0xe4, 0xd0, 0x71, 0x54, 0x82, 0x9f, 0xc1,
	0x8b, 0xc8, 0x64, 0xee, 0xaf, 0xa7, 0x7e, 0x6e, 0xc4, 0x52, 0x25, 0xf3, 0xd0, 0x22, 0x2f, 0xcd,
	0xb4, 0xd1, 0xec, 0x7f, 0x54, 0x82, 0x57, 0x87, 0xbc, 0xf5, 0xf4, 0xe2, 0xa3, 0x4d, 0x87, 0x4f,
	0x36, 0x18, 0x20, 0x65, 0xa7, 0xb4, 0x6f, 0xfd, 0x50, 0x49, 0x4e, 0x46, 0x64, 0xd2, 0x0f, 0x1c,
	0x0b, 0x1e, 0x25, 0x3b, 0xa7, 0x83, 0x34, 0x53, 0x25, 0x84, 0x22, 0xd6, 0x45, 0x62, 0x78, 0x1b,
	0xfd, 0x7f, 0xc8, 0x6e, 0x11, 0xb1, 0x33, 0x6a, 0x65, 0x28, 0x21, 0xd1, 0x31, 0xff, 0x83, 0x09,
	0x8a, 0xe8, 0xbe, 0x22, 0x6c, 0x4c, 0x87, 0x4d, 0x35, 0x1b, 0xe9, 0x60, 0x64, 0x50, 0x43, 0x1b,
	0x3a, 0xa1, 0x8e, 0x2c, 0x32, 0x61, 0x94, 0x4e, 0xf8, 0xdf, 0x11, 0x99, 0x0c, 0x83, 0x83, 0x66,
	0x9c, 0xf6, 0x52, 0xb1, 0xd1, 0x85, 0xc9, 0x79, 0x17, 0xad, 0x46, 0x56, 0xdd, 0x63, 0x95, 0x84,
	0xd5, 0x24, 0xe0, 0xbd, 0x11, 0x99, 0x74, 0x02, 0x27, 0x56, 0x49, 0xb5, 0x20, 0x30, 0x46, 0x3b,
	0x2b, 0x3d, 0x5b, 0x72, 0x07, 0xff, 0xc1, 0xef, 0xa6, 0x0b, 0xc8, 0x66, 0xa1, 0xfe, 0x4f, 0x17,
	0x90, 0xf5, 0x46, 0x97, 0xf4, 0x58, 0xaa, 0xdc, 0x64, 0x2a, 0x2a, 0x0c, 0xc8, 0x7a, 0x3a, 0xc5,
	0xe0, 0xd1, 0x2f, 0x03, 0x5f, 0xb9, 0x7b, 0x78, 0xdf, 0xb9, 0x64, 0xbb, 0x73, 0xc9, 0xd7, 0xce,
	0x25, 0x6f, 0x7b, 0xb7, 0xb5, 0xdd, 0xbb, 0xad, 0xcf, 0xbd, 0xdb, 0x7a, 0xbe, 0x9a, 0x2b, 0xb3,
	0x28, 0x22, 0x6f, 0xa6, 0x63, 0x3f, 0x2a, 0xe1, 0x5a, 0xac, 0xd2, 0x85, 0x30, 0x20, 0x50, 0xf9,
	0xaf, 0x87, 0xd3, 0x99, 0x4d, 0x0a, 0x79, 0xd4, 0xc5, 0x7b, 0xdd, 0x7c, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0x68, 0xc9, 0x0f, 0xd6, 0x01, 0x00, 0x00,
}

func (m *StakingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributedStake) > 0 {
		i -= len(m.DistributedStake)
		copy(dAtA[i:], m.DistributedStake)
		i = encodeVarintStakingReward(dAtA, i, uint64(len(m.DistributedStake)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StakedAmount) > 0 {
		i -= len(m.StakedAmount)
		copy(dAtA[i:], m.StakedAmount)
		i = encodeVarintStakingReward(dAtA, i, uint64(len(m.StakedAmount)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Lock != 0 {
		i = encodeVarintStakingReward(dAtA, i, uint64(m.Lock))
		i--
		dAtA[i] = 0x40
	}
	if m.MinStake != 0 {
		i = encodeVarintStakingReward(dAtA, i, uint64(m.MinStake))
		i--
		dAtA[i] = 0x38
	}
	if m.Payouts != 0 {
		i = encodeVarintStakingReward(dAtA, i, uint64(m.Payouts))
		i--
		dAtA[i] = 0x30
	}
	if m.Duration != 0 {
		i = encodeVarintStakingReward(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StakingDenom) > 0 {
		i -= len(m.StakingDenom)
		copy(dAtA[i:], m.StakingDenom)
		i = encodeVarintStakingReward(dAtA, i, uint64(len(m.StakingDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintStakingReward(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintStakingReward(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintStakingReward(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakingReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakingReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovStakingReward(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovStakingReward(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovStakingReward(uint64(l))
	}
	l = len(m.StakingDenom)
	if l > 0 {
		n += 1 + l + sovStakingReward(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovStakingReward(uint64(m.Duration))
	}
	if m.Payouts != 0 {
		n += 1 + sovStakingReward(uint64(m.Payouts))
	}
	if m.MinStake != 0 {
		n += 1 + sovStakingReward(uint64(m.MinStake))
	}
	if m.Lock != 0 {
		n += 1 + sovStakingReward(uint64(m.Lock))
	}
	l = len(m.StakedAmount)
	if l > 0 {
		n += 1 + l + sovStakingReward(uint64(l))
	}
	l = len(m.DistributedStake)
	if l > 0 {
		n += 1 + l + sovStakingReward(uint64(l))
	}
	return n
}

func sovStakingReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakingReward(x uint64) (n int) {
	return sovStakingReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payouts", wireType)
			}
			m.Payouts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payouts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			m.MinStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			m.Lock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lock |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakingReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakingReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakingReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakingReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakingReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakingReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakingReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakingReward = fmt.Errorf("proto: unexpected end of group")
)
