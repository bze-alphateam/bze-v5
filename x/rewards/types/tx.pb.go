// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bze/rewards/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateStakingReward struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PrizeAmount  string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom   string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	StakingDenom string `protobuf:"bytes,4,opt,name=staking_denom,json=stakingDenom,proto3" json:"staking_denom,omitempty"`
	Duration     string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	MinStake     string `protobuf:"bytes,6,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	Lock         string `protobuf:"bytes,7,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *MsgCreateStakingReward) Reset()         { *m = MsgCreateStakingReward{} }
func (m *MsgCreateStakingReward) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStakingReward) ProtoMessage()    {}
func (*MsgCreateStakingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{0}
}
func (m *MsgCreateStakingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStakingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStakingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStakingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStakingReward.Merge(m, src)
}
func (m *MsgCreateStakingReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStakingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStakingReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStakingReward proto.InternalMessageInfo

func (m *MsgCreateStakingReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateStakingReward) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *MsgCreateStakingReward) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *MsgCreateStakingReward) GetStakingDenom() string {
	if m != nil {
		return m.StakingDenom
	}
	return ""
}

func (m *MsgCreateStakingReward) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *MsgCreateStakingReward) GetMinStake() string {
	if m != nil {
		return m.MinStake
	}
	return ""
}

func (m *MsgCreateStakingReward) GetLock() string {
	if m != nil {
		return m.Lock
	}
	return ""
}

type MsgCreateStakingRewardResponse struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *MsgCreateStakingRewardResponse) Reset()         { *m = MsgCreateStakingRewardResponse{} }
func (m *MsgCreateStakingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStakingRewardResponse) ProtoMessage()    {}
func (*MsgCreateStakingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{1}
}
func (m *MsgCreateStakingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStakingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStakingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStakingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStakingRewardResponse.Merge(m, src)
}
func (m *MsgCreateStakingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStakingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStakingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStakingRewardResponse proto.InternalMessageInfo

func (m *MsgCreateStakingRewardResponse) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type MsgUpdateStakingReward struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RewardId string `protobuf:"bytes,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Duration string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *MsgUpdateStakingReward) Reset()         { *m = MsgUpdateStakingReward{} }
func (m *MsgUpdateStakingReward) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakingReward) ProtoMessage()    {}
func (*MsgUpdateStakingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{2}
}
func (m *MsgUpdateStakingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakingReward.Merge(m, src)
}
func (m *MsgUpdateStakingReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakingReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakingReward proto.InternalMessageInfo

func (m *MsgUpdateStakingReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateStakingReward) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *MsgUpdateStakingReward) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type MsgUpdateStakingRewardResponse struct {
}

func (m *MsgUpdateStakingRewardResponse) Reset()         { *m = MsgUpdateStakingRewardResponse{} }
func (m *MsgUpdateStakingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStakingRewardResponse) ProtoMessage()    {}
func (*MsgUpdateStakingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{3}
}
func (m *MsgUpdateStakingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStakingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStakingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStakingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStakingRewardResponse.Merge(m, src)
}
func (m *MsgUpdateStakingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStakingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStakingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStakingRewardResponse proto.InternalMessageInfo

type MsgCreateTradingReward struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PrizeAmount string `protobuf:"bytes,2,opt,name=prize_amount,json=prizeAmount,proto3" json:"prize_amount,omitempty"`
	PrizeDenom  string `protobuf:"bytes,3,opt,name=prize_denom,json=prizeDenom,proto3" json:"prize_denom,omitempty"`
	Duration    string `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	MarketId    string `protobuf:"bytes,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Slots       string `protobuf:"bytes,6,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (m *MsgCreateTradingReward) Reset()         { *m = MsgCreateTradingReward{} }
func (m *MsgCreateTradingReward) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTradingReward) ProtoMessage()    {}
func (*MsgCreateTradingReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{4}
}
func (m *MsgCreateTradingReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTradingReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTradingReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTradingReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTradingReward.Merge(m, src)
}
func (m *MsgCreateTradingReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTradingReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTradingReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTradingReward proto.InternalMessageInfo

func (m *MsgCreateTradingReward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTradingReward) GetPrizeAmount() string {
	if m != nil {
		return m.PrizeAmount
	}
	return ""
}

func (m *MsgCreateTradingReward) GetPrizeDenom() string {
	if m != nil {
		return m.PrizeDenom
	}
	return ""
}

func (m *MsgCreateTradingReward) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *MsgCreateTradingReward) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MsgCreateTradingReward) GetSlots() string {
	if m != nil {
		return m.Slots
	}
	return ""
}

type MsgCreateTradingRewardResponse struct {
	RewardId string `protobuf:"bytes,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (m *MsgCreateTradingRewardResponse) Reset()         { *m = MsgCreateTradingRewardResponse{} }
func (m *MsgCreateTradingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTradingRewardResponse) ProtoMessage()    {}
func (*MsgCreateTradingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{5}
}
func (m *MsgCreateTradingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTradingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTradingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTradingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTradingRewardResponse.Merge(m, src)
}
func (m *MsgCreateTradingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTradingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTradingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTradingRewardResponse proto.InternalMessageInfo

func (m *MsgCreateTradingRewardResponse) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type MsgJoinStaking struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RewardId string `protobuf:"bytes,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgJoinStaking) Reset()         { *m = MsgJoinStaking{} }
func (m *MsgJoinStaking) String() string { return proto.CompactTextString(m) }
func (*MsgJoinStaking) ProtoMessage()    {}
func (*MsgJoinStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{6}
}
func (m *MsgJoinStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinStaking.Merge(m, src)
}
func (m *MsgJoinStaking) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinStaking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinStaking proto.InternalMessageInfo

func (m *MsgJoinStaking) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgJoinStaking) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *MsgJoinStaking) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgJoinStakingResponse struct {
}

func (m *MsgJoinStakingResponse) Reset()         { *m = MsgJoinStakingResponse{} }
func (m *MsgJoinStakingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinStakingResponse) ProtoMessage()    {}
func (*MsgJoinStakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{7}
}
func (m *MsgJoinStakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinStakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinStakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinStakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinStakingResponse.Merge(m, src)
}
func (m *MsgJoinStakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinStakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinStakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinStakingResponse proto.InternalMessageInfo

type MsgExitStaking struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RewardId string `protobuf:"bytes,2,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
}

func (m *MsgExitStaking) Reset()         { *m = MsgExitStaking{} }
func (m *MsgExitStaking) String() string { return proto.CompactTextString(m) }
func (*MsgExitStaking) ProtoMessage()    {}
func (*MsgExitStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{8}
}
func (m *MsgExitStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExitStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExitStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExitStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExitStaking.Merge(m, src)
}
func (m *MsgExitStaking) XXX_Size() int {
	return m.Size()
}
func (m *MsgExitStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExitStaking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExitStaking proto.InternalMessageInfo

func (m *MsgExitStaking) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExitStaking) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type MsgExitStakingResponse struct {
}

func (m *MsgExitStakingResponse) Reset()         { *m = MsgExitStakingResponse{} }
func (m *MsgExitStakingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExitStakingResponse) ProtoMessage()    {}
func (*MsgExitStakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{9}
}
func (m *MsgExitStakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExitStakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExitStakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExitStakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExitStakingResponse.Merge(m, src)
}
func (m *MsgExitStakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExitStakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExitStakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExitStakingResponse proto.InternalMessageInfo

type MsgClaimStakingRewards struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RewardId string `protobuf:"bytes,2,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
}

func (m *MsgClaimStakingRewards) Reset()         { *m = MsgClaimStakingRewards{} }
func (m *MsgClaimStakingRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimStakingRewards) ProtoMessage()    {}
func (*MsgClaimStakingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{10}
}
func (m *MsgClaimStakingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimStakingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimStakingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimStakingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimStakingRewards.Merge(m, src)
}
func (m *MsgClaimStakingRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimStakingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimStakingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimStakingRewards proto.InternalMessageInfo

func (m *MsgClaimStakingRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimStakingRewards) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

type MsgClaimStakingRewardsResponse struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgClaimStakingRewardsResponse) Reset()         { *m = MsgClaimStakingRewardsResponse{} }
func (m *MsgClaimStakingRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimStakingRewardsResponse) ProtoMessage()    {}
func (*MsgClaimStakingRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{11}
}
func (m *MsgClaimStakingRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimStakingRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimStakingRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimStakingRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimStakingRewardsResponse.Merge(m, src)
}
func (m *MsgClaimStakingRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimStakingRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimStakingRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimStakingRewardsResponse proto.InternalMessageInfo

func (m *MsgClaimStakingRewardsResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgDistributeStakingRewards struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RewardId string `protobuf:"bytes,2,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgDistributeStakingRewards) Reset()         { *m = MsgDistributeStakingRewards{} }
func (m *MsgDistributeStakingRewards) String() string { return proto.CompactTextString(m) }
func (*MsgDistributeStakingRewards) ProtoMessage()    {}
func (*MsgDistributeStakingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{12}
}
func (m *MsgDistributeStakingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDistributeStakingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDistributeStakingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDistributeStakingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDistributeStakingRewards.Merge(m, src)
}
func (m *MsgDistributeStakingRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgDistributeStakingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDistributeStakingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDistributeStakingRewards proto.InternalMessageInfo

func (m *MsgDistributeStakingRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDistributeStakingRewards) GetRewardId() string {
	if m != nil {
		return m.RewardId
	}
	return ""
}

func (m *MsgDistributeStakingRewards) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgDistributeStakingRewardsResponse struct {
}

func (m *MsgDistributeStakingRewardsResponse) Reset()         { *m = MsgDistributeStakingRewardsResponse{} }
func (m *MsgDistributeStakingRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDistributeStakingRewardsResponse) ProtoMessage()    {}
func (*MsgDistributeStakingRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f48b5a05ed79d90a, []int{13}
}
func (m *MsgDistributeStakingRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDistributeStakingRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDistributeStakingRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDistributeStakingRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDistributeStakingRewardsResponse.Merge(m, src)
}
func (m *MsgDistributeStakingRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDistributeStakingRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDistributeStakingRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDistributeStakingRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateStakingReward)(nil), "bze.rewards.v1.MsgCreateStakingReward")
	proto.RegisterType((*MsgCreateStakingRewardResponse)(nil), "bze.rewards.v1.MsgCreateStakingRewardResponse")
	proto.RegisterType((*MsgUpdateStakingReward)(nil), "bze.rewards.v1.MsgUpdateStakingReward")
	proto.RegisterType((*MsgUpdateStakingRewardResponse)(nil), "bze.rewards.v1.MsgUpdateStakingRewardResponse")
	proto.RegisterType((*MsgCreateTradingReward)(nil), "bze.rewards.v1.MsgCreateTradingReward")
	proto.RegisterType((*MsgCreateTradingRewardResponse)(nil), "bze.rewards.v1.MsgCreateTradingRewardResponse")
	proto.RegisterType((*MsgJoinStaking)(nil), "bze.rewards.v1.MsgJoinStaking")
	proto.RegisterType((*MsgJoinStakingResponse)(nil), "bze.rewards.v1.MsgJoinStakingResponse")
	proto.RegisterType((*MsgExitStaking)(nil), "bze.rewards.v1.MsgExitStaking")
	proto.RegisterType((*MsgExitStakingResponse)(nil), "bze.rewards.v1.MsgExitStakingResponse")
	proto.RegisterType((*MsgClaimStakingRewards)(nil), "bze.rewards.v1.MsgClaimStakingRewards")
	proto.RegisterType((*MsgClaimStakingRewardsResponse)(nil), "bze.rewards.v1.MsgClaimStakingRewardsResponse")
	proto.RegisterType((*MsgDistributeStakingRewards)(nil), "bze.rewards.v1.MsgDistributeStakingRewards")
	proto.RegisterType((*MsgDistributeStakingRewardsResponse)(nil), "bze.rewards.v1.MsgDistributeStakingRewardsResponse")
}

func init() { proto.RegisterFile("bze/rewards/v1/tx.proto", fileDescriptor_f48b5a05ed79d90a) }

var fileDescriptor_f48b5a05ed79d90a = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0x8f, 0xb6, 0xdb, 0xd0, 0x83, 0x8b, 0x5a, 0xcb, 0x95, 0x4c, 0x49, 0x45, 0x85,
	0xf8, 0xb0, 0x55, 0x7a, 0x41, 0x48, 0x1c, 0x80, 0x82, 0x54, 0xa4, 0x5c, 0x42, 0x7b, 0x41, 0x48,
	0xd1, 0x3a, 0x5e, 0xb9, 0xab, 0x64, 0xbd, 0x96, 0x77, 0x53, 0x92, 0x88, 0x13, 0xbf, 0x80, 0x9f,
	0xc2, 0xcf, 0xe0, 0x58, 0x89, 0x0b, 0x47, 0x94, 0x1c, 0x38, 0x71, 0xe5, 0x8c, 0xbc, 0xeb, 0xb8,
	0x76, 0xba, 0x31, 0x69, 0x85, 0x7a, 0xcb, 0xce, 0xbc, 0xcc, 0x9b, 0x79, 0x6f, 0x67, 0x65, 0xb0,
	0xe5, 0x8e, 0x90, 0x13, 0xa1, 0x8f, 0x30, 0xf2, 0x98, 0x73, 0xb6, 0xef, 0xf0, 0x81, 0x1d, 0x46,
	0x94, 0x53, 0x7d, 0xdd, 0x1d, 0x21, 0x3b, 0x49, 0xd8, 0x67, 0xfb, 0xe6, 0x56, 0x87, 0x32, 0x42,
	0x99, 0x43, 0x98, 0x1f, 0xe3, 0x08, 0xf3, 0x25, 0xb0, 0xf1, 0x47, 0x03, 0x9b, 0x4d, 0xe6, 0xbf,
	0x8a, 0x10, 0xe4, 0xe8, 0x1d, 0x87, 0x5d, 0x1c, 0xf8, 0x2d, 0xf1, 0x3f, 0xdd, 0x00, 0xcb, 0x9d,
	0x38, 0x4c, 0x23, 0x43, 0xdb, 0xd1, 0xee, 0xaf, 0xb6, 0xa6, 0x47, 0xfd, 0x2e, 0xa8, 0x87, 0x11,
	0x1e, 0xa1, 0x36, 0x24, 0xb4, 0x1f, 0x70, 0x63, 0x49, 0xa4, 0xd7, 0x44, 0xec, 0x85, 0x08, 0xe9,
	0x77, 0x80, 0x3c, 0xb6, 0x3d, 0x14, 0x50, 0x62, 0x94, 0x05, 0x02, 0x88, 0xd0, 0x61, 0x1c, 0xd1,
	0x77, 0xc1, 0x2d, 0x26, 0xe9, 0x12, 0x48, 0x45, 0x40, 0xea, 0x49, 0x50, 0x82, 0x4c, 0xb0, 0xe2,
	0xf5, 0x23, 0xc8, 0x31, 0x0d, 0x8c, 0xaa, 0xc8, 0xa7, 0x67, 0x7d, 0x1b, 0xac, 0x12, 0x1c, 0xb4,
	0x63, 0x3c, 0x32, 0x6a, 0x32, 0x49, 0x70, 0x10, 0xcf, 0x80, 0x74, 0x1d, 0x54, 0x7a, 0xb4, 0xd3,
	0x35, 0x96, 0x45, 0x5c, 0xfc, 0x7e, 0x56, 0xff, 0xfc, 0xeb, 0xeb, 0x83, 0xe9, 0x0c, 0x8d, 0xe7,
	0xc0, 0x52, 0xcf, 0xdd, 0x42, 0x2c, 0xa4, 0x01, 0x43, 0x31, 0x81, 0x54, 0xb0, 0x8d, 0xbd, 0x44,
	0x81, 0x15, 0x19, 0x38, 0xf2, 0x1a, 0x43, 0x21, 0xdb, 0x49, 0xe8, 0x5d, 0x41, 0xb6, 0x5c, 0xc1,
	0xa5, 0x7c, 0xc1, 0xdc, 0xa8, 0xe5, 0xfc, 0xa8, 0x33, 0x9d, 0xef, 0x88, 0xce, 0x15, 0xd4, 0xd3,
	0xce, 0x1b, 0xdf, 0xb3, 0xa6, 0x1e, 0x47, 0xd0, 0xbb, 0x29, 0x53, 0xb3, 0x43, 0x54, 0x14, 0x7e,
	0xc1, 0xa8, 0x8b, 0x78, 0x3c, 0x7d, 0x62, 0xa6, 0x0c, 0x1c, 0x79, 0xfa, 0x6d, 0x50, 0x65, 0x3d,
	0xca, 0x59, 0x62, 0xa4, 0x3c, 0x14, 0x38, 0x96, 0x1b, 0x6a, 0x31, 0xc7, 0x08, 0x58, 0x6f, 0x32,
	0xff, 0x2d, 0x95, 0x57, 0x04, 0x07, 0xfe, 0x75, 0x9d, 0xda, 0x04, 0xb5, 0x44, 0x22, 0x29, 0x40,
	0x72, 0x9a, 0xe9, 0xd6, 0x10, 0x16, 0x64, 0xe8, 0x52, 0x77, 0x8e, 0x45, 0x23, 0xaf, 0x07, 0x98,
	0xff, 0xbb, 0x11, 0x13, 0xa4, 0xbc, 0xb3, 0x7d, 0x28, 0xf9, 0x32, 0x55, 0x53, 0xbe, 0x0f, 0xf2,
	0x32, 0xf4, 0x20, 0x26, 0xb9, 0xeb, 0xc2, 0xfe, 0x0b, 0xef, 0x53, 0xe9, 0xca, 0xe5, 0xea, 0xa9,
	0x2b, 0x17, 0x7a, 0x69, 0x59, 0xbd, 0x1a, 0x43, 0xb0, 0xdd, 0x64, 0xfe, 0x21, 0x66, 0x3c, 0xc2,
	0x6e, 0x7f, 0xe6, 0x2e, 0x5f, 0xb3, 0xb9, 0x05, 0xcd, 0xb9, 0x07, 0x76, 0x0b, 0xa8, 0xa7, 0x9d,
	0x3f, 0xf9, 0x5d, 0x05, 0xe5, 0x26, 0xf3, 0x75, 0x02, 0x36, 0x54, 0x0f, 0xe4, 0x9e, 0x9d, 0x7f,
	0x65, 0x6d, 0xf5, 0x83, 0x62, 0xda, 0x8b, 0xe1, 0x52, 0xc1, 0x08, 0xd8, 0x50, 0x3d, 0x2c, 0x2a,
	0x3a, 0x05, 0x4e, 0x49, 0x57, 0xf0, 0x5a, 0x5c, 0x4c, 0x97, 0x7f, 0x29, 0xe6, 0x4f, 0x97, 0xc3,
	0x15, 0x4c, 0xa7, 0x5e, 0xd2, 0x13, 0xb0, 0x96, 0x5d, 0x42, 0x4b, 0xf1, 0xf7, 0x4c, 0xde, 0xdc,
	0x2b, 0xce, 0x67, 0xcb, 0x66, 0x57, 0x4a, 0x55, 0x36, 0x93, 0x57, 0x96, 0x55, 0x2c, 0x8f, 0x10,
	0x47, 0xb1, 0x39, 0x4a, 0x71, 0x2e, 0xe3, 0xd4, 0xe2, 0x14, 0xec, 0xca, 0x27, 0x60, 0xcc, 0x5d,
	0x88, 0x87, 0x8a, 0x5a, 0xf3, 0xc0, 0xe6, 0xc1, 0x15, 0xc0, 0x53, 0xf6, 0x97, 0x6f, 0xbe, 0x8d,
	0x2d, 0xed, 0x7c, 0x6c, 0x69, 0x3f, 0xc7, 0x96, 0xf6, 0x65, 0x62, 0x95, 0xce, 0x27, 0x56, 0xe9,
	0xc7, 0xc4, 0x2a, 0xbd, 0x7f, 0xe4, 0x63, 0x7e, 0xda, 0x77, 0xed, 0x0e, 0x25, 0x8e, 0x3b, 0x42,
	0x8f, 0x61, 0x2f, 0x3c, 0x85, 0x1c, 0x41, 0x71, 0x72, 0x06, 0xe9, 0x37, 0x08, 0x1f, 0x86, 0x88,
	0xb9, 0x35, 0xf1, 0x6d, 0x71, 0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0x10, 0x12, 0xf9, 0x99, 0x9f,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateStakingReward(ctx context.Context, in *MsgCreateStakingReward, opts ...grpc.CallOption) (*MsgCreateStakingRewardResponse, error)
	UpdateStakingReward(ctx context.Context, in *MsgUpdateStakingReward, opts ...grpc.CallOption) (*MsgUpdateStakingRewardResponse, error)
	CreateTradingReward(ctx context.Context, in *MsgCreateTradingReward, opts ...grpc.CallOption) (*MsgCreateTradingRewardResponse, error)
	JoinStaking(ctx context.Context, in *MsgJoinStaking, opts ...grpc.CallOption) (*MsgJoinStakingResponse, error)
	ExitStaking(ctx context.Context, in *MsgExitStaking, opts ...grpc.CallOption) (*MsgExitStakingResponse, error)
	ClaimStakingRewards(ctx context.Context, in *MsgClaimStakingRewards, opts ...grpc.CallOption) (*MsgClaimStakingRewardsResponse, error)
	DistributeStakingRewards(ctx context.Context, in *MsgDistributeStakingRewards, opts ...grpc.CallOption) (*MsgDistributeStakingRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateStakingReward(ctx context.Context, in *MsgCreateStakingReward, opts ...grpc.CallOption) (*MsgCreateStakingRewardResponse, error) {
	out := new(MsgCreateStakingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/CreateStakingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStakingReward(ctx context.Context, in *MsgUpdateStakingReward, opts ...grpc.CallOption) (*MsgUpdateStakingRewardResponse, error) {
	out := new(MsgUpdateStakingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/UpdateStakingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTradingReward(ctx context.Context, in *MsgCreateTradingReward, opts ...grpc.CallOption) (*MsgCreateTradingRewardResponse, error) {
	out := new(MsgCreateTradingRewardResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/CreateTradingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinStaking(ctx context.Context, in *MsgJoinStaking, opts ...grpc.CallOption) (*MsgJoinStakingResponse, error) {
	out := new(MsgJoinStakingResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/JoinStaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExitStaking(ctx context.Context, in *MsgExitStaking, opts ...grpc.CallOption) (*MsgExitStakingResponse, error) {
	out := new(MsgExitStakingResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/ExitStaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimStakingRewards(ctx context.Context, in *MsgClaimStakingRewards, opts ...grpc.CallOption) (*MsgClaimStakingRewardsResponse, error) {
	out := new(MsgClaimStakingRewardsResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/ClaimStakingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DistributeStakingRewards(ctx context.Context, in *MsgDistributeStakingRewards, opts ...grpc.CallOption) (*MsgDistributeStakingRewardsResponse, error) {
	out := new(MsgDistributeStakingRewardsResponse)
	err := c.cc.Invoke(ctx, "/bze.rewards.v1.Msg/DistributeStakingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateStakingReward(context.Context, *MsgCreateStakingReward) (*MsgCreateStakingRewardResponse, error)
	UpdateStakingReward(context.Context, *MsgUpdateStakingReward) (*MsgUpdateStakingRewardResponse, error)
	CreateTradingReward(context.Context, *MsgCreateTradingReward) (*MsgCreateTradingRewardResponse, error)
	JoinStaking(context.Context, *MsgJoinStaking) (*MsgJoinStakingResponse, error)
	ExitStaking(context.Context, *MsgExitStaking) (*MsgExitStakingResponse, error)
	ClaimStakingRewards(context.Context, *MsgClaimStakingRewards) (*MsgClaimStakingRewardsResponse, error)
	DistributeStakingRewards(context.Context, *MsgDistributeStakingRewards) (*MsgDistributeStakingRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateStakingReward(ctx context.Context, req *MsgCreateStakingReward) (*MsgCreateStakingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStakingReward not implemented")
}
func (*UnimplementedMsgServer) UpdateStakingReward(ctx context.Context, req *MsgUpdateStakingReward) (*MsgUpdateStakingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStakingReward not implemented")
}
func (*UnimplementedMsgServer) CreateTradingReward(ctx context.Context, req *MsgCreateTradingReward) (*MsgCreateTradingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradingReward not implemented")
}
func (*UnimplementedMsgServer) JoinStaking(ctx context.Context, req *MsgJoinStaking) (*MsgJoinStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinStaking not implemented")
}
func (*UnimplementedMsgServer) ExitStaking(ctx context.Context, req *MsgExitStaking) (*MsgExitStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitStaking not implemented")
}
func (*UnimplementedMsgServer) ClaimStakingRewards(ctx context.Context, req *MsgClaimStakingRewards) (*MsgClaimStakingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimStakingRewards not implemented")
}
func (*UnimplementedMsgServer) DistributeStakingRewards(ctx context.Context, req *MsgDistributeStakingRewards) (*MsgDistributeStakingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeStakingRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateStakingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateStakingReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateStakingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/CreateStakingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateStakingReward(ctx, req.(*MsgCreateStakingReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStakingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStakingReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStakingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/UpdateStakingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStakingReward(ctx, req.(*MsgUpdateStakingReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTradingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTradingReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTradingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/CreateTradingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTradingReward(ctx, req.(*MsgCreateTradingReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinStaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/JoinStaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinStaking(ctx, req.(*MsgJoinStaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExitStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExitStaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExitStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/ExitStaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExitStaking(ctx, req.(*MsgExitStaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimStakingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimStakingRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimStakingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/ClaimStakingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimStakingRewards(ctx, req.(*MsgClaimStakingRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DistributeStakingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDistributeStakingRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DistributeStakingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bze.rewards.v1.Msg/DistributeStakingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DistributeStakingRewards(ctx, req.(*MsgDistributeStakingRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bze.rewards.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStakingReward",
			Handler:    _Msg_CreateStakingReward_Handler,
		},
		{
			MethodName: "UpdateStakingReward",
			Handler:    _Msg_UpdateStakingReward_Handler,
		},
		{
			MethodName: "CreateTradingReward",
			Handler:    _Msg_CreateTradingReward_Handler,
		},
		{
			MethodName: "JoinStaking",
			Handler:    _Msg_JoinStaking_Handler,
		},
		{
			MethodName: "ExitStaking",
			Handler:    _Msg_ExitStaking_Handler,
		},
		{
			MethodName: "ClaimStakingRewards",
			Handler:    _Msg_ClaimStakingRewards_Handler,
		},
		{
			MethodName: "DistributeStakingRewards",
			Handler:    _Msg_DistributeStakingRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bze/rewards/v1/tx.proto",
}

func (m *MsgCreateStakingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStakingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStakingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lock) > 0 {
		i -= len(m.Lock)
		copy(dAtA[i:], m.Lock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Lock)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MinStake) > 0 {
		i -= len(m.MinStake)
		copy(dAtA[i:], m.MinStake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinStake)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StakingDenom) > 0 {
		i -= len(m.StakingDenom)
		copy(dAtA[i:], m.StakingDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateStakingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStakingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStakingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStakingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStakingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStakingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTradingReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTradingReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTradingReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slots) > 0 {
		i -= len(m.Slots)
		copy(dAtA[i:], m.Slots)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Slots)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrizeDenom) > 0 {
		i -= len(m.PrizeDenom)
		copy(dAtA[i:], m.PrizeDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrizeDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrizeAmount) > 0 {
		i -= len(m.PrizeAmount)
		copy(dAtA[i:], m.PrizeAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrizeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTradingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTradingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTradingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinStakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinStakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinStakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExitStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExitStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExitStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExitStakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExitStakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExitStakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimStakingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimStakingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimStakingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimStakingRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimStakingRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimStakingRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDistributeStakingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDistributeStakingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDistributeStakingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RewardId) > 0 {
		i -= len(m.RewardId)
		copy(dAtA[i:], m.RewardId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDistributeStakingRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDistributeStakingRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDistributeStakingRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateStakingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinStake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Lock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateStakingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateStakingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateStakingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTradingReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrizeAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrizeDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Slots)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTradingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinStakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExitStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExitStakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimStakingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimStakingRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDistributeStakingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDistributeStakingRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateStakingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStakingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStakingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinStake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStakingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStakingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStakingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStakingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStakingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStakingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTradingReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTradingReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTradingReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrizeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTradingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTradingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTradingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinStakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinStakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinStakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExitStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExitStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExitStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExitStakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExitStakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExitStakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimStakingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimStakingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimStakingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimStakingRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimStakingRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimStakingRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDistributeStakingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDistributeStakingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDistributeStakingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDistributeStakingRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDistributeStakingRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDistributeStakingRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
